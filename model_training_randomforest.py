# -*- coding: utf-8 -*-
"""model training#randomforest

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wUtAmbbHVk7B8-DIasebU8EbVkTh0Wkf
"""

import numpy as np
import pandas as pd



#random forest
data=r'/content/drive/MyDrive/re-id/Data_points.xlsx'
image_path=r'/content/drive/MyDrive/re-id/137_fixed.tif'

df = pd.read_excel(data)

import sklearn

X_labels = ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7']
y_label = 'Label'

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df[X_labels], df[y_label], test_size=0.2, stratify=df['Label'], random_state=15)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score, StratifiedKFold

clf=RandomForestClassifier(n_estimators=100, random_state=9)

skf = StratifiedKFold(n_splits=10, shuffle=True,random_state=12)

cv_scores = cross_val_score(clf, X_train, y_train, cv=skf, scoring='accuracy')

print('Accuracy score - 10foldCV - Training dataset: {}'.format(np.mean(cv_scores)))
# result :
# Accuracy score - 10foldCV - Training dataset: 0.6038961038961038

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import StratifiedKFold, GridSearchCV

clf=RandomForestClassifier(random_state=10)
skf = StratifiedKFold(n_splits=10, shuffle=True, random_state=10)
param_grid = { 
    'n_estimators': [10, 100],
    'max_features': ['auto', 'sqrt'],
    'criterion' : ['gini','entropy'],
}

gridCV_clf = GridSearchCV(estimator = clf, param_grid=param_grid, cv = skf, scoring='accuracy', verbose=2)
gridCV_clf.fit(X_train, y_train)
print(gridCV_clf.best_params_)

print(gridCV_clf.best_score_)
#result : {'criterion': 'gini', 'max_features': 'auto', 'n_estimators': 100}
0.5935064935064934

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(max_features='auto', n_estimators=100, random_state=10, criterion='entropy')
clf.fit(X_train,y_train)
y_pred=clf.predict(X_test)

from sklearn.metrics import accuracy_score, confusion_matrix
print('Accuracy score - Test dataset: {}'.format(accuracy_score(y_test, y_pred)))
#result: Accuracy score - Test dataset: 0.5803108808290155

# #svm
# from sklearn.svm import LinearSVC
# from sklearn.model_selection import StratifiedKFold, GridSearchCV
# svm_svc=LinearSVC()
# param_grid={
#     'C' : ['2.0'],
#     'kernel':['linear', 'precomputed'],
#     'decision_function_shape':['ovo', 'ovr']


# }
# gridCV_clf = GridSearchCV(estimator = svm_svc, param_grid=param_grid, cv = 5, scoring='accuracy', verbose=2)
# gridCV_clf.fit(X_train, y_train)
# print(gridCV_clf.best_params_)
# print(gridCV_clf.best_score_)